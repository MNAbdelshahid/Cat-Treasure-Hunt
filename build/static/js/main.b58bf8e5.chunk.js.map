{"version":3,"sources":["Boxes.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Boxes","props","handleClick","index","boxLocation","checkCounter","counter","class","onClick","this","value","Component","Board","componentDidMount","boxes","state","winner","Math","floor","random","length","loser","setState","winningBox","losingBox","console","log","gameWinning","window","setTimeout","location","reload","alert","gameLosing","newCount","counters","gameOver","restartGame","checked","square","map","key","id","src","alt","App","React","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"sPAqBeA,E,kDAlBX,WAAYC,GAAO,IAAD,8BACd,gBAGJC,YAAc,SAACC,GACX,EAAKF,MAAMG,YAAY,EAAKH,MAAME,OAClC,EAAKF,MAAMI,aAAa,EAAKJ,MAAMK,UANrB,E,qDAUd,OACI,6BACA,4BAAQC,MAAQ,QAAQC,QAAWC,KAAKP,aAAxC,IAAuDO,KAAKR,MAAMS,MAAlE,U,GAbQC,aCkHLC,E,kDAhHX,WAAYX,GAAO,IAAD,8BACd,cAAMA,IAYVY,kBAAoB,WAAO,IAChBC,EAAS,EAAKC,MAAdD,MACHE,EAASC,KAAKC,MAAMD,KAAKE,SAASL,EAAMM,QACxCC,EAAQJ,KAAKC,MAAMD,KAAKE,SAASL,EAAMM,QACvCJ,IAAWK,IACXA,EAAQJ,KAAKC,MAAMD,KAAKE,SAASL,EAAMM,SAE3C,EAAKE,SAAU,CAACC,WAAYP,EAAQQ,UAAWH,IAC/CI,QAAQC,IAAIV,EAAQK,IArBN,EAwBlBjB,YAAc,SAACD,GAAU,IAAD,EACmB,EAAKY,MAArCQ,EADa,EACbA,WAAYC,EADC,EACDA,UAAWV,EADV,EACUA,MAE1BX,IAAUoB,GACVT,EAAMX,GAAS,eACf,EAAKmB,SAAS,CACVR,MAAOA,EACPa,aAAa,IAEjBC,OAAOC,YAAW,WAAWD,OAAOE,SAASC,WAAW,KACxDH,OAAOC,YAAW,WAAWG,MAAM,mBAAmB,MAE/C7B,IAAUqB,GACjBV,EAAMX,GAAS,eACf,EAAKmB,SAAU,CACXR,MAAQA,EACRmB,YAAY,IAEhBL,OAAOC,YAAW,WAAWD,OAAOE,SAASC,WAAW,KACxDH,OAAOC,YAAW,WAAWG,MAAM,qBAAqB,OAExDlB,EAAMX,GAAS,IACf,EAAKmB,SAAS,CACVR,MAAQA,MA/CF,EAoDlBT,aAAe,WACX,IAAI6B,EAAW,EAAKnB,MAAMoB,SAAU,EAChCD,EAAW,GACX,EAAKZ,SAAU,CACXc,UAAU,IAEdJ,MAAM,eACNJ,OAAOC,YAAW,WAAWD,OAAOE,SAASC,WAAW,MAExD,EAAKT,SAAS,CAACa,SAAUD,KA7Df,EAkElBG,YAAc,WACVT,OAAOE,SAASC,UAjEZ,EAAKhB,MAAM,CACPD,MAAM,CAAE,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,gBACxDwB,SAAS,EACTf,WAAY,KACZC,UAAW,KACXW,SAAU,EACVR,aAAa,EACbM,YAAY,GATN,E,qDAuET,IAAD,SAEsBxB,KAAKM,MAA1BD,EAFD,EAECA,MACDyB,GAHA,EAEQhB,WACCT,EAAM0B,KAAI,SAAC9B,EAAOP,GAC3B,OACI,kBAAC,EAAD,CACAO,MAASA,EACTP,MAASA,EACTsC,IAAOtC,EACPC,YAAe,EAAKA,YACpBC,aAAgB,EAAKA,mBAK7B,OACI,yBAAKqC,GAAI,aACT,gDACA,8DACA,8BACMjC,KAAKM,MAAMY,cAAelB,KAAKM,MAAMkB,YACnC,yBAAKS,GAAG,WACPH,GAEJ9B,KAAKM,MAAMY,aACR,yBAAKe,GAAG,UACR,yBAAKA,GAAG,SAASC,IAAI,+EAAgFC,IAAI,SAE5GnC,KAAKM,MAAMkB,YACR,yBAAKS,GAAG,WACR,yBAAKA,GAAG,UAAUC,IAAI,oDAAoDC,IAAI,SAEtF,4CAAkBnC,KAAKM,MAAMoB,UAC7B,4BAAQ3B,QAAWC,KAAK4B,aAAxB,uB,GAzGQ1B,aCeLkC,G,6KAZP,OACI,6BACA,kBAAC,EAAD,W,GAJMC,IAAMnC,YCQlBoC,EAAcC,QACW,cAA7BpB,OAAOE,SAASmB,UAEe,UAA7BrB,OAAOE,SAASmB,UAEhBrB,OAAOE,SAASmB,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7C,QACfuC,UAAUC,cAAcQ,YAI1BtC,QAAQC,IACN,iHAKE2B,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBjC,QAAQC,IAAI,sCAGR2B,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAC,GACL1C,QAAQ0C,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB9C,OAAOE,SAAS6C,MACpDC,SAAWhD,OAAOE,SAAS8C,OAIvC,OAGFhD,OAAOiD,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,GAAN,sBAEP3B,IAgEV,SAAiCK,EAAOC,GAEtCyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7B7B,OAAOE,SAASC,eAKpBoB,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLzC,QAAQC,IACN,oEAvFA6D,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjChC,QAAQC,IACN,iHAMJyB,EAAgBC,EAAOC,OClC/BE,I","file":"static/js/main.b58bf8e5.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Boxes extends Component{\n    constructor(props){\n        super()\n    }\n\n    handleClick = (index) => {\n        this.props.boxLocation(this.props.index)\n        this.props.checkCounter(this.props.counter)\n    }\n\n    render(){\n        return(\n            <div>\n            <button class = \"Boxes\" onClick = {this.handleClick}> {this.props.value} </button>\n            </div>\n        )\n    }\n}\n\nexport default Boxes;\n","import React, {Component} from 'react';\nimport Boxes from './Boxes.js'\n\nclass Board extends Component{\n    constructor(props){\n        super(props)\n            this.state={\n                boxes:[ \"游꾸\", \"游꾸\", \"游꾸\", \"游꾸\", \"游꾸\", \"游꾸\", \"游꾸\", \"游꾸\", \"游꾸\"],\n                checked: false,\n                winningBox: null,\n                losingBox: null,\n                counters: 6,\n                gameWinning: false,\n                gameLosing: false\n        }\n    }\n\n    componentDidMount = () => {\n        const {boxes} = this.state\n        let winner = Math.floor(Math.random()*boxes.length)\n        let loser = Math.floor(Math.random()*boxes.length)\n        if (winner === loser){\n            loser = Math.floor(Math.random()*boxes.length)\n        }\n        this.setState ({winningBox: winner, losingBox: loser})\n        console.log(winner, loser)\n    }\n\n    boxLocation = (index) =>{\n        const {winningBox, losingBox, boxes} = this.state\n\n        if( index === winningBox){\n            boxes[index] = \"游땾\"\n            this.setState({\n                boxes: boxes,\n                gameWinning: true\n            })\n            window.setTimeout(function(){window.location.reload()}, 200);\n            window.setTimeout(function(){alert(\"You found it!\")}, 200);\n\n        } else if (index === losingBox){\n            boxes[index] = \"游냇\"\n            this.setState ({\n                boxes : boxes,\n                gameLosing: true\n            })\n            window.setTimeout(function(){window.location.reload()}, 200);\n            window.setTimeout(function(){alert(\"You got chased!\")}, 200);\n        } else {\n            boxes[index] = \"X\"\n            this.setState({\n                boxes : boxes\n            })\n        }\n    }\n\n    checkCounter = () => {\n        let newCount = this.state.counters- 1\n        if (newCount < 0){\n            this.setState ({\n                gameOver: true\n            })\n            alert(\"You failed!\")\n            window.setTimeout(function(){window.location.reload()}, 200);\n        } else {\n            this.setState({counters: newCount})\n        }\n    }\n\n\n    restartGame = () => {\n        window.location.reload();\n    }\n\n\n    render(){\n      // eslint-disable-next-line\n        let {boxes, winningBox} = this.state\n        let square = boxes.map((value, index)=> {\n            return (\n                <Boxes\n                value = {value}\n                index = {index}\n                key = {index}\n                boxLocation = {this.boxLocation}\n                checkCounter = {this.checkCounter}\n                />\n            )\n        })\n\n        return(\n            <div id= \"container\">\n            <h2> Find your cat! </h2>\n            <h3> Don't get chased by the dog! </h3>\n            <br />\n                {!this.state.gameWinning&& !this.state.gameLosing &&\n                    <div id=\"gamebox\">\n                    {square}\n                </div>}\n                {this.state.gameWinning&&\n                    <div id=\"gameOn\">\n                    <img id=\"dogWin\" src=\"https://i.pinimg.com/originals/25/ea/64/25ea6471cfdc1d807ff46752cbc53598.gif\"  alt=\"GIF\"/>\n                </div>}\n                {this.state.gameLosing &&\n                    <div id=\"gameOff\">\n                    <img id=\"dogLose\" src=\"https://i.makeagif.com/media/3-03-2014/dDpSe0.gif\" alt=\"GIF\" />\n                </div>}\n            <h1>Boxes Left : {this.state.counters}</h1>\n            <button onClick = {this.restartGame}> Restart Game </button>\n            </div>\n\n        )\n    }\n}\n\n\nexport default Board;\n","import React from 'react';\nimport Board  from './Board.js';\nimport './App.css';\n\nclass App extends React.Component{\n    render(){\n        return(\n            <div>\n            <Board />\n\n            </div>\n\n\n        )\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}